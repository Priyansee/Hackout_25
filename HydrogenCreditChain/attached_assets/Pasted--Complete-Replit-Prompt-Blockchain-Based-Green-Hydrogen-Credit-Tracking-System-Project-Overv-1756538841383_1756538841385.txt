# Complete Replit Prompt: Blockchain-Based Green Hydrogen Credit Tracking System

## Project Overview
Create a **complete hackathon-ready web application** for a Blockchain-Based Green Hydrogen Credit Tracking System using MERN stack + Solidity smart contracts. This system provides transparent, fraud-proof tracking of green hydrogen credits from production to retirement.

## Technical Stack Requirements
- **Frontend**: React.js with Tailwind CSS, Web3.js/Ethers.js integration
- **Backend**: Node.js + Express.js + MongoDB
- **Blockchain**: Solidity smart contracts (deployable to Polygon/Ethereum testnet)
- **Storage**: IPFS integration for document storage
- **Authentication**: JWT + DID-based verification system

## Core Features to Implement

### 1. Smart Contracts (Solidity)
Create the following smart contracts in `/contracts/` directory:

```solidity
// HydrogenCreditNFT.sol - Main credit tokenization contract
// Features: ERC-721 with ERC-1155 fractionalization, metadata storage
// Functions: mintCredit(), fractionalizeCredit(), getMetadata()

// Marketplace.sol - Trading and retirement contract  
// Features: Verified trading, credit retirement, escrow
// Functions: listCredit(), buyCredit(), retireCredit()

// IdentityRegistry.sol - DID-based verification
// Features: Role-based access, producer/buyer verification
// Functions: registerEntity(), verifyIdentity(), assignRole()

// ComplianceOracle.sol - Regulatory compliance
// Features: Multi-signature validation, audit trails
// Functions: validateProduction(), generateReport()
```

### 2. Backend API (Node.js + Express + MongoDB)
Create RESTful APIs in `/backend/` with these endpoints:

**Authentication & Identity**
- `POST /api/auth/register` - Register new users with DID
- `POST /api/auth/login` - JWT authentication
- `GET /api/auth/profile` - User profile with verification status

**Hydrogen Credits**
- `POST /api/credits/issue` - Issue new hydrogen credits
- `GET /api/credits/search/:tokenId` - Search and verify credits
- `GET /api/credits/explorer` - Credit explorer with pagination
- `PUT /api/credits/transfer` - Transfer credit ownership
- `DELETE /api/credits/retire` - Permanently retire credits

**Marketplace**
- `GET /api/marketplace/listings` - Active credit listings
- `POST /api/marketplace/list` - List credit for sale
- `POST /api/marketplace/purchase` - Purchase credits
- `GET /api/marketplace/history` - Transaction history

**Regulatory & Compliance**
- `GET /api/compliance/reports` - Generate compliance reports
- `GET /api/compliance/audit-trail/:creditId` - Full audit trail
- `GET /api/compliance/dashboard` - Regulatory dashboard data

**Analytics & Monitoring**
- `GET /api/analytics/production-stats` - Production statistics
- `GET /api/analytics/market-overview` - Market overview data
- `GET /api/analytics/environmental-impact` - Environmental metrics

### 3. Frontend Application (React)
Create a comprehensive React application in `/frontend/` with these components:

**Main Dashboard Pages**
- **Home/Landing Page**: Project overview, statistics, live market data
- **Credit Explorer**: Search credits by ID, view full lifecycle, verify authenticity
- **Marketplace**: Browse, buy, sell credits with real-time pricing
- **Producer Dashboard**: Mint credits, monitor production, view earnings
- **Buyer Dashboard**: Purchase history, compliance reports, carbon tracking
- **Regulator Dashboard**: Market oversight, audit trails, compliance monitoring

**Key Components**
- **Web3 Integration**: Connect wallet, interact with smart contracts
- **Map Visualization**: Interactive map showing hydrogen production facilities
- **Credit Lifecycle Viewer**: Timeline showing credit journey from creation to retirement
- **Trading Interface**: Order book, price charts, transaction execution
- **Document Viewer**: Encrypted certificate display with IPFS integration
- **Verification System**: Real-time verification status indicators

### 4. Database Schema (MongoDB)
Design collections for:
- **Users**: DID, roles, verification status, wallet addresses
- **HydrogenCredits**: Token IDs, metadata, production data, ownership history
- **Productions**: Facility data, production records, certification status
- **Transactions**: All marketplace activities, transfers, retirements
- **ComplianceReports**: Regulatory reports, audit logs, verification records

### 5. Key Technical Features

**Blockchain Integration**
- Smart contract deployment scripts for local/testnet
- Web3 provider configuration (MetaMask integration)
- Transaction signing and gas optimization
- Event listening for real-time updates

**Security Implementation**
- JWT token authentication with refresh tokens
- Rate limiting on all API endpoints
- Input validation and sanitization
- CORS configuration for secure frontend-backend communication

**IPFS Integration**
- Document upload and retrieval functions
- Metadata storage for credits
- Certificate verification system

**Real-time Features**
- WebSocket integration for live market updates
- Real-time credit verification status
- Live production monitoring dashboard

## Sample Data & Demo Setup
Include comprehensive sample data:
- **5 Green Hydrogen Producers** with different facility types
- **3 Industrial Buyers** with varying credit needs
- **50+ Sample Credits** with complete lifecycle data
- **Mock Certification Documents** stored in IPFS
- **Sample Transactions** showing marketplace activity

## File Structure
```
hydrogen-credit-system/
├── contracts/
│   ├── HydrogenCreditNFT.sol
│   ├── Marketplace.sol
│   ├── IdentityRegistry.sol
│   └── ComplianceOracle.sol
├── backend/
│   ├── server.js
│   ├── routes/
│   ├── models/
│   ├── middleware/
│   └── utils/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── hooks/
│   │   └── utils/
│   └── public/
├── hardhat.config.js
├── package.json
└── README.md
```

## Environment Configuration
Set up environment variables for:
- MongoDB connection string
- JWT secret keys
- IPFS API credentials
- Ethereum/Polygon RPC URLs
- MetaMask configuration

## Deployment & Demo Requirements
- **Local Development**: Complete setup with Hardhat local blockchain
- **Frontend Build**: Production-ready React build
- **API Documentation**: Swagger/OpenAPI documentation
- **Demo Script**: Step-by-step demo walkthrough
- **Docker Configuration**: Containerized deployment setup

## Success Criteria
The application should demonstrate:
1. **End-to-end Credit Lifecycle**: From hydrogen production to credit retirement
2. **Fraud Prevention**: Immutable tracking, double-spending prevention
3. **Marketplace Functionality**: Real credit trading with price discovery
4. **Regulatory Compliance**: Automated reporting and audit trails
5. **User Experience**: Intuitive interface for all stakeholder types
6. **Scalability**: Efficient database queries and blockchain interactions

## Special Instructions for Implementation
- Use **Hardhat** for smart contract development and testing
- Implement **MetaMask** wallet integration for all blockchain interactions
- Create **responsive design** that works on desktop and mobile
- Include **error handling** for all blockchain and API operations
- Add **loading states** and **transaction confirmations** for better UX
- Implement **search functionality** with fuzzy matching for credit discovery
- Create **data visualization** charts for production and market analytics

## Demo Scenario
The final application should support this demo flow:
1. Producer registers facility and mints credits from hydrogen production
2. Credits appear in marketplace with full traceability information
3. Industrial buyer purchases credits for compliance
4. Regulator views real-time dashboard showing market activity
5. Credits are retired, showing complete audit trail from production to consumption

Generate a **complete, production-ready application** with all files, configurations, and documentation needed for a successful hackathon demonstration. Include sample data and clear setup instructions for immediate deployment and testing.